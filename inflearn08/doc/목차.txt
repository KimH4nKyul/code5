1. 작동하는 소프트웨어를 쉽게 만들 수 있도록 준비합니다.
1(생각해볼문제)
1.1 작동하는 소프트웨어를 쉽게 만들 수 있도록 준비합니다.
1.2 첫번째 서블릿을 만듭니다. - Board
1.3 MVC 아키텍쳐 스타일로 리펙토링 합니다. - MasterController
1.4 임베디드 톰캣을 실행하고 작동하는 소프트웨어를 확인합니다.
1(심화) 내가 만든 코드는 개발/테스트/운영에서 작동합니다.
1(심화) web.xml 이 있어야 하는 이유
1(심화) 개발자가 알아두면 좋을 네트워크 개념
1(심화) 파일업로드 기능을 구현합니다.
1(비교) 프레임워크를 작동시키는 정보   

2. 공통기능을 추상화 하고 쉽게 사용할 수 있도록 구성합니다.
2(생각해볼문제)
2.1 공통기능을 추상화 하고 쉽게 사용할 수 있도록 구성합니다.
2.2 첫번째 테스트 코드를 만듭니다. - Board_test
2.3 입력과 출력 기능을 Box 로 추상화 하고 구현합니다. - Box, BoxLocal, BoxHttp
2.4 공통기능을 제공하는 방법 3가지
2.5 추상화된 공통기능인 Box를 잘 사용할 수 있게 합니다. - BoxContext
2.6 추상화된 공통기능으로 서비스 코드를 리펙토링 합니다. - Board, Board_test
2(심화) 우리는 UTF-8 인코딩 규칙을 사용합니다.
2(심화) 인터페이스는 교체비용을 줄이기 위해 사용합니다.
2(심화) 추상화된 공통기능인 Box를 더 잘 사용할 수 있게 합니다.
2(심화) XSS 공격을 방어합니다.
2(비교) 입력/출력기능

3. SQL 의존적인 개발을 제거합니다.
3(생각해볼문제)
3.1 DBMS 는 비즈니스 로직의 일관성과 무결성 그리고 영속성을 위해 사용됩니다.
3.2 트랜잭션 기능을 구현합니다. - Transaction
3.3 Transaction을 공통기능으로 리펙토링 합니다. - TransactionContext
3.4 멀티쓰레드 환경에서 Transaction을 제공합니다. - MasterController
3.5 SQL 기능을 사용한(의존적인) 개발 - BoardByJDBC
3.6 java 에서 SQL 실행 결과는 int 또는 Table 입니다.
3.7 입력/수정/삭제 그리고 조회 SQL기능을 설계합니다. - SqlRunner_test
3.8 SQL 과 java 코드를 분리합니다. - Sql
3.9 입력/수정/삭제 그리고 조회 SQL기능을 개발합니다. - SqlRunner
3.10 SQL 의존을 제거합니다. - Board
3(심화) 다른 SQL 기능과 트랜잭션 묶기 - 마이바티스,JPA
3(심화) 아직 남아 있는 SQL 의존적인 문제를 제거합니다.(1)
3(심화) 여러개의 배열을 편하게 이용할 수 있도록 Table을 리펙토링 합니다.
2(심화) DTO는 내용결합을 발생시킵니다.
3(비교) 마이바티스 if 문, JPA 캐쉬 

4. 비즈니스 로직을 재사용할 수 있는 DI 와 IoC 를 구현합니다.
4.1 첫번째 비즈니스 로직을 구현합니다. - Board
4.2 두번째 비즈니스 로직을 구현합니다. - Login
4.3 비즈니스 로직을 재사용할 수 있는 DI 와 IoC 를 구현합니다.
4.4 IoC에 필요한 정보를 가져오는 방법 3가지 - class, xml, DB
4.5 한줄의 메소드로 비즈니스 로직을 컨테이너가 수행할 수 있게 합니다. - MasterController
4.6 IoC/DI가 비즈니스 로직을 간결하게 함을 확인합니다. - Login
4(심화) 높은 응집도를 위한 패키지/네이밍 규칙
4(심화) 절대경로, 상대경로 그리고 기준경로
4(심화) IoC/DI 실행 비용을 개선합니다.
4(비교) 스프링부트

5. 인증과 접근제어 기능을 구현합니다.
5.1 기밀성, 무결성, 가용성 그리고 기술적 보안
5.2 인증 기능을 구현하기 위해선 WAS의 세션을 알아야 합니다. - SessionB
5.3 내가 누군지 확인하는 인증 기능을 구현합니다 - Login
5.4 인증과 접근제어 정보를 자바코드에서 알려줍니다. - ServiceAnnotation
5.5 내가 할 수 있는 작업을 확인하는 접근제어 기능을 구현합니다. - MasterController
5.6 인증과 접근제어 기능을 사용합니다. - Board, BoardAdmin
5(심화) 세션은 처음부터 생성 됩니다.
5(심화) 테스트 코드로 인증과 접근제어 기능을 확인합니다.
5(심화) 접근제어 정보를 뷰에 전달합니다.
5(비교) 스프링시큐리티

6. 개발자가 알아두면 좋은 지식 암호화
6.1 패스워드를 보호합니다. - CryptPin
6.2 암호화 기능을 구현합니다.
6.3 AES 암호화 알고리즘, CBC 운영모드, PKCS7 패딩
6.4 javax.crypto 패키지(JCE)에 없는 암호화 알고리즘을 추가합니다. - Aria
6.5 암호화 알고리즘에 사용될 비밀키를 보호합니다.
6.6 암호화 기능을 동작해봅니다.
6(심화) 아직 남아 있는 SQL 의존적인 문제를 제거합니다.(2)
6(심화) DB 암호화 방식 5가지
6(심화) 업로드된 파일을 암호화 합니다.
6(비교) 스프링시큐리티

7. SW 비가시성을 해결하기 위해 로그기능을 구현합니다.
7.1 SW 비가시성을 해결하기 위해 로그기능을 구현합니다.
7.2 로그를 공통기능으로 만듭니다. - Trace
7.3 단일쓰레드 환경을 위한 로그 기능을 구현합니다. - TraceRunner
7.4 멀티쓰레드 환경을 위한 로그 기능을 구현합니다. - TraceRunner
7(심화) 리스타트, 리로드
7(심화) 필요한 로그만 기록하게 합니다.
7(심화) 배치프로그램을 만들어 봅니다.
6(비교) log4j

8. 우리가 만든 프레임워크로 할 수 있는 것들 
8.1 서비스포탈
8.2 SSO
8.3 API G/W