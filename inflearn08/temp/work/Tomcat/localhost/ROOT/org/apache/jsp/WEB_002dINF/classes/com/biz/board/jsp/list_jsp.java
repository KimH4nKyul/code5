/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.66
 * Generated at: 2021-07-23 07:28:46 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.classes.com.biz.board.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import com.code5.fw.web.MasterController;
import com.code5.fw.data.Table;
import com.code5.fw.web.BoxContext;
import com.code5.fw.data.Box;

public final class list_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("com.code5.fw.web.MasterController");
    _jspx_imports_classes.add("com.code5.fw.data.Table");
    _jspx_imports_classes.add("com.code5.fw.data.Box");
    _jspx_imports_classes.add("com.code5.fw.web.BoxContext");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");

	Box box = BoxContext.get();
	Table list = box.getTable("list");
	
	boolean isLimitRecode = list.isLimitRecode();
	Box limitBox = list.getLimitBox();
	
	boolean isAllDelete = MasterController.checkUrlAuth("allDelete");
	boolean isAllUpdate = MasterController.checkUrlAuth("allUpdate");
	boolean isForceDelete = MasterController.checkUrlAuth("forceDelete");

      out.write("\r\n");
      out.write("\r\n");
      out.write("<script type=\"text/javascript\">\r\n");
      out.write("function callNextList(NEXT_N){\r\n");
      out.write("\r\n");
      out.write("	var form = document.form1;\r\n");
      out.write("	form1.NEXT_N.value = NEXT_N;\r\n");
      out.write("	form.action = '/waf/callList';\r\n");
      out.write("	form.submit();\r\n");
      out.write("	return;\r\n");
      out.write("	\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("function callUpdate(TOKEN_N){\r\n");
      out.write("	var form = document.form1;\r\n");
      out.write("	form1.THIS_TOKEN_N.value = TOKEN_N;\r\n");
      out.write("	form.action = '/waf/callUpdate';\r\n");
      out.write("	form.submit();\r\n");
      out.write("	return;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("function exeDelete(TOKEN_N){\r\n");
      out.write("	var form = document.form1;\r\n");
      out.write("	form1.THIS_TOKEN_N.value = TOKEN_N;\r\n");
      out.write("	form.action = '/waf/exeDelete';\r\n");
      out.write("	form.submit();\r\n");
      out.write("	return;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("function forceDelete(TOKEN_N){\r\n");
      out.write("	var form = document.form1;\r\n");
      out.write("	form1.THIS_TOKEN_N.value = TOKEN_N;\r\n");
      out.write("	form.action = '/waf/forceDelete';\r\n");
      out.write("	form.submit();\r\n");
      out.write("	return;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("function allDelete(){\r\n");
      out.write("	\r\n");
      out.write("	");
if(!isAllDelete){
      out.write("\r\n");
      out.write("		alert('권한이 없습니다.');\r\n");
      out.write("		return;\r\n");
      out.write("	");
}
      out.write("\r\n");
      out.write("	\r\n");
      out.write("	var form = document.form1;\r\n");
      out.write("	form.action = '/waf/allDelete';\r\n");
      out.write("	form.submit();\r\n");
      out.write("	return;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("function allUpdate(){\r\n");
      out.write("	\r\n");
      out.write("	");
if(!isAllUpdate){
      out.write("\r\n");
      out.write("		alert('권한이 없습니다.');\r\n");
      out.write("		return;\r\n");
      out.write("	");
}
      out.write("\r\n");
      out.write("	\r\n");
      out.write("	var form = document.form1;\r\n");
      out.write("	form.action = '/waf/allUpdate';\r\n");
      out.write("	form.submit();\r\n");
      out.write("	return;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("</script>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<form name=\"form1\" method=\"post\">\r\n");
      out.write("<hr>\r\n");
      out.write("	<table border=\"1\">\r\n");
      out.write("		<tr>\r\n");
      out.write("			<td>\r\n");
      out.write("<button onclick=\"callList()\">callList</button>\r\n");
      out.write("<button onclick=\"allUpdate()\">allUpdate</button>\r\n");
      out.write("<button onclick=\"allDelete()\">allDelete</button>\r\n");
      out.write("<br>form1.NEXT_N : <input type=\"TEXT\" name=\"NEXT_N\" value=\"");
      out.print(box.s("NEXT_N"));
      out.write("\">\r\n");
      out.write("<br>form1.THIS_TOKEN_N : <input type=\"TEXT\" name=\"THIS_TOKEN_N\" value=\"");
      out.print(box.s("THIS_TOKEN_N"));
      out.write("\">\r\n");
      out.write("<br>form1.FIND_OPT : <input type=\"TEXT\" name=\"FIND_OPT\" value=\"");
      out.print(box.s("FIND_OPT"));
      out.write("\">\r\n");
      out.write("<br>form1.FIND_SRT : <input type=\"TEXT\" name=\"FIND_SRT\" value=\"");
      out.print(box.s("FIND_OPT"));
      out.write("\">\r\n");
      out.write("			</td>\r\n");
      out.write("		</tr>\r\n");
      out.write("	</table>\r\n");
      out.write("<hr>\r\n");
      out.write("<table border=\"1\">\r\n");
      out.write("		<tr>\r\n");
      out.write("			<td>N</td>\r\n");
      out.write("			<td>TITLE</td>\r\n");
      out.write("			<td>EM</td>\r\n");
      out.write("			<td>TOKEN_N</td>\r\n");
      out.write("			<td>service</td>\r\n");
      out.write("		</tr>\r\n");
      out.write("			\r\n");
      out.write("	");
for (int i = 0; i < list.size(); i++) {
      out.write("\r\n");
      out.write("	\r\n");
      out.write("	<tr>\r\n");
      out.write("		<td>");
      out.print(list.s("N", i));
      out.write("</td>\r\n");
      out.write("		<td><input type=\"TEXT\" name=\"TITLE\" value=\"");
      out.print(list.s("TITLE", i));
      out.write("\"></td>\r\n");
      out.write("		<td><input type=\"TEXT\" name=\"EM\" value=\"");
      out.print(list.s("EM", i));
      out.write("\"></td>\r\n");
      out.write("		<td><input type=\"TEXT\" readonly=\"readonly\" name=\"TOKEN_N\" value=\"");
      out.print(list.s("TOKEN_N", i));
      out.write("\"></td>\r\n");
      out.write("		<td>\r\n");
      out.write("		<button onclick=\"callUpdate('");
      out.print(list.s("TOKEN_N", i));
      out.write("')\">callUpdate</button>\r\n");
      out.write("		<button onclick=\"exeDelete('");
      out.print(list.s("TOKEN_N", i));
      out.write("')\">exeDelete</button>\r\n");
      out.write("		");
if(isForceDelete) { 
      out.write("\r\n");
      out.write("		<button onclick=\"forceDelete('");
      out.print(list.s("TOKEN_N", i));
      out.write("')\">forceDelete</button>\r\n");
      out.write("		");
}
      out.write("\r\n");
      out.write("		</td>\r\n");
      out.write("	</tr>\r\n");
      out.write("	");
}
      out.write("\r\n");
      out.write("	</table>\r\n");
      out.write("	");
 if(isLimitRecode) {
      out.write("\r\n");
      out.write("		<button onclick=\"callNextList('");
      out.print(limitBox.s("N"));
      out.write("')\">callNextList,");
      out.print(limitBox.s("N"));
      out.write("</button>\r\n");
      out.write("	");
 }
      out.write("\r\n");
      out.write("</form>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
