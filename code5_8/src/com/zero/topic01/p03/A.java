package com.zero.topic01.p03;

import java.util.ArrayList;
import java.util.List;

class A {

	void method() {

		// 파급효과 종류
		// 3. 교체 : 기존 기능과 새로운 기능을 동시에 사용

		// 교체할 필요가 있을때 A 코드 수정
		B b = new B1();
		// B b = new B2();

		b.method();

	}
}

interface B {
	public void method();
}

class B1 implements B {

	public void method() {
	}

}

class B2 implements B {

	public void method() {
	}

}

class C {

	void moethod() {

		// 잘못된 객체 생성, 쓸때없는 추상화 사용

		List<String> list = new ArrayList<String>();
		sort(list);

		((ArrayList<String>) list).addAll(null);

		// 일부러 인터페이스로 추상화 해 사용할 필요는 없다.

		ArrayList<String> list2 = new ArrayList<String>();
		sort(list2);

		list2.addAll(null);

	}

	void sort(List<String> list) {

		// 추상화의 영역
		// OOP 리스코프 법칙

	}
}
